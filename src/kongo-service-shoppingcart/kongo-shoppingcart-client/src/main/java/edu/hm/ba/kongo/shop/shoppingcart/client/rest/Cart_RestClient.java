package edu.hm.ba.kongo.shop.shoppingcart.client.rest;

import edu.hm.ba.kongo.shop.shoppingcart.client.local.Cart_;
import org.springframework.hateoas.Link;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
public interface Cart_RestClient {

    /**
     * The name of the Base Endpoint
     */
    public static final String CARTS = "carts";

    /**
     * Get all the Carts (with matching tenancy).
     *
     * @return a List of all Carts.
     */
    List<Cart_> findAll();

    /**
     * Get all the Carts (with matching tenancy) on a specific endpoint.
     * <p>
     *     For example: <code>http://localhost:80/entitys/1/attribute</code>
     * </p>
     * @param relation
     * @return
     */
    List<Cart_> findAll(Link relation);
    
    /**
     * Get all Cart matched with string due to fuzzy search.
     * @param filter the string for the query
     * @return
     */
    List<Cart_> findFullTextFuzzy(String filter);

    /**
     * Try to find one Cart (with matching tenancy) by its ID / self relation.
     *
     * @param link The ID / self relation of the Cart_.
     * @return an optional of the Cart_.
     */
    Optional<Cart_> findOne(Link link);

    /**
     * Set all the relations, specified by links, on a specific relation endpoint.
     * <p>
     * Example for an Endpoint: <code>http://localhost:80/entitys/1/attribute</code>
     * </p>
     * <p>
     * This method will always (re-) set the associations. The add or delete
     * functionality is not provided at RestClient level.
     * </p>
     *
     * @param endpoint The endpoint of the relation.
     * @param links    The links that are set to be related.
     */
    void setRelations(Link endpoint, Collection<Link> links);
	/**
	 * Set the relation, specified by @relation, on a specific relation endpoint.
	 * <p>
	 * Example for an Endpoint: <code>http://localhost:80/entitys/1/attribute</code>
	 * </p>
	 * <p>
	 * This method will always (re-) set the association. The add or delete
	 * functionality is not provided at RestClient level.
	 * </p>
	 *
	 * @param endpoint The endpoint of the relation.
	 * @param relation    The link that is set to be related.
	 */
	void setRelation(Link endpoint, Link relation);
    /**
     * Create a new Cart_, the returned Cart_ will have the Links and its ID.
     * @param cart The Cart_ to create, it must not contain any links.
     * @return the created Cart_ (with ID).
     */
    Cart_ create(Cart_ cart);

    /**
     * Update the fields of a Cart_ by the {@link Cart_#getId()}.
     *
     * @param cart The updated Cart_ that will be saved.
     * @return the updated version from the REST Server.
     */
    Cart_ update(Cart_ cart);

    /**
     * Try to delete an ID.
     * @param id The link to the id.
     */
    void delete(Link id);
}
