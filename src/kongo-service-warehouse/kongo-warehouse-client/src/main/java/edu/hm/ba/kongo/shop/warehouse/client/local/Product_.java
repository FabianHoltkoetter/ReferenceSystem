package edu.hm.ba.kongo.shop.warehouse.client.local;

/*
 * This file will NOT be overwritten by GAIA.
 * This file was automatically generated by GAIA.
 */
import java.util.stream.Stream;

import javax.validation.constraints.*;
import java.math.BigDecimal;
import org.springframework.hateoas.ResourceSupport;
/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
public class Product_ extends ResourceSupport {
	
	@NotNull
	@Size(min=1, max=255)
	private String name;
	
	private String description;
	
	@NotNull
	@DecimalMin("0.0")
	private BigDecimal price;
	
	@NotNull
	@Min((long)0.0)
	private long quantity;
	
	public Product_(){}
	
	/**
     * Create a new Product_ with the  name, description, price, quantity.
     *
     * @param name the name of the Product_.
     * @param description the description of the Product_.
     * @param price the price of the Product_.
     * @param quantity the quantity of the Product_.
     */
    public Product_( String name, String description, BigDecimal price, long quantity) {
        this.setName(name);
        this.setDescription(description);
        this.setPrice(price);
        this.setQuantity(quantity);
    }
	
	// Getters and Setters
	public String getName(){
		return name;
	}
	
	public void setName(String name){
		this.name = name;
	}
	
	public String getDescription(){
		return description;
	}
	
	public void setDescription(String description){
		this.description = description;
	}
	
	public BigDecimal getPrice(){
		return price;
	}
	
	public void setPrice(BigDecimal price){
		this.price = price;
	}
	
	public long getQuantity(){
		return quantity;
	}
	
	public void setQuantity(long quantity){
		this.quantity = quantity;
	}
	
	 /**
      * A simple Enum for all the Fields of this Product_.
      * <p>
      *     You can use {@link Field#name()} for the String.
      * </p>
      */
	public enum Field {
        name, description(false), price, quantity;

        private final boolean field;

        Field() {
			this(true);
		}

		Field(boolean field) {
			this.field = field;
		}

		public boolean isField() {
			return field;
		}

		public static String[] getProperties() {
			return Stream.of(values()).filter(Field::isField).map(Field::name).toArray(String[]::new);
		}
	}
	
	 /**
	  * A simple Enum for all the Relations ({@link Product_#getLink(String)} of the Product_.
	  * <p>
	  *     You can use {@link Rel#name()} for the String.
	  * </p>
	  */
	 public enum Rel {
	 	;
    }
	
	
	@Override
	public boolean equals(Object other) {
		if (other == null)
			return false;
		if (this == other)
			return true;
		if (!(other.getClass() == Product_.class))
			return false;
		if (!super.equals(other))
			return false;
		Product_ product = (Product_) other;
		if (getName() != null ? !getName().equals(product.getName()) : product.getName() != null)
			return false;
		if (getDescription() != null ? !getDescription().equals(product.getDescription()) : product.getDescription() != null)
			return false;
		if (getPrice() != product.getPrice())
			return false;
		if (getQuantity() != product.getQuantity())
			return false;
		return true;
	}

	@Override
	public int hashCode() {
		int result = super.hashCode();
		result = 31 * result + (getName() != null ? getName().hashCode() : 0);
		result = 31 * result + (getDescription() != null ? getDescription().hashCode() : 0);
		result = 31 * result + (getPrice() != null ? getPrice().hashCode() : 0);
		result = 31 * result + (int) (getQuantity() ^ (getQuantity() >>> 32));
		return result;
	}

	/**
	 * Returns a String representation for this Product.
	 * The form is:
	 * <EntityName>
	 * <attribute1_Type> <attribute1_name>: <attribute1_value>
	 * <attribute2_Type> <attribute2_name>: <attribute2_value>
	 * ...
	 */
	@Override
	public String toString(){
		String s = "Product";
		s += "\nString name: " + getName();
		s += "\nString description: " + getDescription();
		s += "\nBigDecimal price: " + getPrice();
		s += "\nlong quantity: " + getQuantity();
		return s;
	}
}
