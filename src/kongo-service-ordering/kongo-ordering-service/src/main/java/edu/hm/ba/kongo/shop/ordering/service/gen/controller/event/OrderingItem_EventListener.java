package edu.hm.ba.kongo.shop.ordering.service.gen.controller.event;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.rest.core.event.AbstractRepositoryEventListener;
import org.springframework.stereotype.Component;

import edu.hm.ba.kongo.shop.ordering.service.gen.domain.OrderingItem_;
import edu.hm.ba.kongo.shop.ordering.service.gen.services.event.OrderingItem_EventService;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
/**
 * This event-listener allows a OrderingItem_EventService to implement logic before and after Events.
 */
@Component
public class OrderingItem_EventListener extends AbstractRepositoryEventListener<OrderingItem_>{
	@Autowired
	OrderingItem_EventService service;
	
	@Override
	protected void onAfterCreate(OrderingItem_ entity) {
		service.onAfterCreate(entity);
	}
	@Override
	protected void onBeforeCreate(OrderingItem_ entity) {
		service.onBeforeCreate(entity);
	}
	@Override
	protected void onBeforeSave(OrderingItem_ entity) {
		service.onBeforeSave(entity);
	}
	@Override
	protected void onAfterSave(OrderingItem_ entity) {
		service.onAfterSave(entity);
	}
	@Override
	protected void onBeforeLinkSave(OrderingItem_ parent, Object linked) {
		service.onBeforeLinkSave(parent, linked);
	}
	@Override
	protected void onAfterLinkSave(OrderingItem_ parent, Object linked) {
		service.onAfterLinkSave(parent, linked);
	}
	@Override
	protected void onBeforeLinkDelete(OrderingItem_ parent, Object linked) {
		service.onBeforeLinkDelete(parent, linked);
	}
	@Override
	protected void onBeforeDelete(OrderingItem_ entity) {
		service.onBeforeDelete(entity);
	}
	@Override
	protected void onAfterDelete(OrderingItem_ entity) {
		service.onAfterDelete(entity);
	}
	@Override
	protected void onAfterLinkDelete(OrderingItem_ parent, Object linked) {
		service.onAfterLinkDelete(parent, linked);
	}
}
