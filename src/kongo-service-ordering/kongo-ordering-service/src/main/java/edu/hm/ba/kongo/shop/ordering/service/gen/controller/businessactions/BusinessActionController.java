package edu.hm.ba.kongo.shop.ordering.service.gen.controller.businessactions;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.rest.webmvc.BasePathAwareController;
import org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler;
import org.springframework.data.rest.webmvc.RepositoryLinksResource;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.ResourceProcessor;
import org.springframework.hateoas.ResourceSupport;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import edu.hm.ba.kongo.shop.ordering.service.gen.businessActionParams.OrderCart_BusinessActionParameters;
import edu.hm.ba.kongo.shop.ordering.service.gen.businessActionParams.SendInvoice_BusinessActionParameters;
import edu.hm.ba.kongo.shop.ordering.service.gen.businessActionParams.CancelOrder_BusinessActionParameters;

import edu.hm.ba.kongo.shop.ordering.service.gen.services.businessactions.OrderCart_BusinessActionService;
import edu.hm.ba.kongo.shop.ordering.service.gen.services.businessactions.SendInvoice_BusinessActionService;
import edu.hm.ba.kongo.shop.ordering.service.gen.services.businessactions.CancelOrder_BusinessActionService;
import edu.hm.ba.kongo.shop.ordering.service.gen.services.businessactions.TestDatenBusinessActionService;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
/**
 * This controller is responsible for mapping businessActions to REST-endpoints.
 */
@BasePathAwareController
@RequestMapping(value = "/businessActions")
public class BusinessActionController implements ResourceProcessor<RepositoryLinksResource> {

	@Autowired
	OrderCart_BusinessActionService orderCartactionService;
	@Autowired
	SendInvoice_BusinessActionService sendInvoiceactionService;
	@Autowired
	CancelOrder_BusinessActionService cancelOrderactionService;
	@Autowired
	TestDatenBusinessActionService testDatenBusinessActionService;

	/**
	 * This method returns a list of links of all mapped businessActions.
	 */
    public List<Link> getMethodActions() {
        List<Link> methodLinks = new ArrayList<>();
        final String base = linkTo(BusinessActionController.class).toUri().toString();
		methodLinks.add(linkTo(methodOn(BusinessActionController.class).testdatenErzeugen(null)).withRel("testdatenErzeugen"));
		
		methodLinks.add(new Link(base + "/orderCart", "orderCart"));
		methodLinks.add(new Link(base + "/sendInvoice", "sendInvoice"));
		methodLinks.add(new Link(base + "/cancelOrder", "cancelOrder"));

        return methodLinks;
    }

	/**
	 * Resource without content.
	 */
    class BusinessLinksResource extends ResourceSupport {
        public BusinessLinksResource() {}
    }

	/**
	 * Return available businessActions on the /businessActions endpoint.
	 */
    @RequestMapping(method = RequestMethod.GET)
    public @ResponseBody ResponseEntity<BusinessLinksResource> getActions() {
        BusinessLinksResource links = new BusinessLinksResource();
        links.add(linkTo(BusinessActionController.class).withSelfRel());

        links.add(getMethodActions());

        return new ResponseEntity<>(links,HttpStatus.OK);
    }

	/**
	 * This method adds the link to /businessActions to the REST-startpoint.
	 */
    @Override
    public RepositoryLinksResource process(RepositoryLinksResource repositoryLinksResource) {
		repositoryLinksResource.add(linkTo(methodOn(BusinessActionController.class).getActions()).withRel("businessActions"));
        return repositoryLinksResource;
    }

	/**
	 * This BusinessAction's purpose is to insert test data.
	 */
	@RequestMapping(value = "/testdatenErzeugen", method = RequestMethod.GET)
	public ResponseEntity<?> testdatenErzeugen(PersistentEntityResourceAssembler assembler)
	{
		testDatenBusinessActionService.testdatenErzeugen();
		
		return new ResponseEntity<>(HttpStatus.OK);
		
	}

	/**
	 * This BusinessAction's purpose is: Receives a shopping cart to create a new order which can then be payed
	 */
	@RequestMapping(value = "/orderCart", method = RequestMethod.POST)
	public ResponseEntity<?> orderCart(PersistentEntityResourceAssembler assembler, @RequestHeader Map<String, Object> headers, @RequestBody OrderCart_BusinessActionParameters body)
	{	
		orderCartactionService.orderCart(headers, body.getCartID());
		return new ResponseEntity<>(HttpStatus.OK);
	}
	
	/**
	 * This BusinessAction's purpose is: Sends the value of the costs of the ordered procuts to an invoicing system
	 */
	@RequestMapping(value = "/sendInvoice", method = RequestMethod.POST)
	public ResponseEntity<?> sendInvoice(PersistentEntityResourceAssembler assembler, @RequestHeader Map<String, Object> headers, @RequestBody SendInvoice_BusinessActionParameters body)
	{	
		sendInvoiceactionService.sendInvoice(headers, body.getOrderID());
		return new ResponseEntity<>(HttpStatus.OK);
	}
	
	/**
	 * This BusinessAction's purpose is: Deletes an order and the associated shopping cart with it's contents
	 */
	@RequestMapping(value = "/cancelOrder", method = RequestMethod.POST)
	public ResponseEntity<?> cancelOrder(PersistentEntityResourceAssembler assembler, @RequestHeader Map<String, Object> headers, @RequestBody CancelOrder_BusinessActionParameters body)
	{	
		cancelOrderactionService.cancelOrder(headers, body.getOrderID());
		return new ResponseEntity<>(HttpStatus.OK);
	}
	
} 
